{"version":3,"file":"rbush.esm.js","sources":["../index.ts"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst quickselect = require('quickselect');\n\nfunction assert(condition: unknown, message?: string): asserts condition {\n  if (!condition) {\n    throw new Error('Assertion Error: ' + message);\n  }\n}\n\n// TODO: 生产环境去掉该计算\nfunction isBBox(item: unknown): item is BBox {\n  const keys = ['minX', 'minY', 'maxX', 'maxY'];\n  for (const key of keys) {\n    if (typeof item[key] !== 'number') {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport interface BBox {\n  minX: number;\n  minY: number;\n  maxX: number;\n  maxY: number;\n}\n\ninterface Leaf<T> extends BBox {\n  children: Array<T>;\n  leaf: true;\n  height: 1;\n}\n\ninterface Branch<T> extends BBox {\n  children: Array<Node<T>>;\n  leaf: false;\n  height: number;\n}\n\ntype Node<T> = Branch<T> | Leaf<T>;\n\nexport type ToBBox<T> = (node: T) => BBox;\nexport type EqualsFn<T> = (a: Readonly<T>, b: Readonly<T>) => boolean;\nexport type compareMin<T> = (a: Readonly<T>, b: Readonly<T>) => number;\n\nexport default class RBush<T> {\n  private _maxEntries: number;\n  private _minEntries: number;\n  private data: Node<T>;\n\n  constructor(maxEntries = 9) {\n    // max entries in a node is 9 by default; min node fill is 40% for best performance\n    this._maxEntries = Math.max(4, maxEntries);\n    this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\n    this.clear();\n  }\n\n  toBBox(item: T): BBox {\n    assert(isBBox(item), '如果 item 不是 BBox 类型，需要重写 toBBox');\n    return item;\n  }\n\n  compareMinX(a: Readonly<T>, b: Readonly<T>): number {\n    assert(isBBox(a), '如果 a 不是 BBox 类型，需要重写 compareMinX');\n    assert(isBBox(b), '如果 b 不是 BBox 类型，需要重写 compareMinX');\n    return compareNodeMinX(a, b);\n  }\n\n  compareMinY(a: Readonly<T>, b: Readonly<T>): number {\n    assert(isBBox(a), '如果 a 不是 BBox 类型，需要重写 compareMinY');\n    assert(isBBox(b), '如果 b 不是 BBox 类型，需要重写 compareMinY');\n    return compareNodeMinY(a, b);\n  }\n\n  all(): T[] {\n    return this._all(this.data, []);\n  }\n\n  search(bbox: BBox): T[] {\n    let node: Node<T> = this.data;\n    const result: T[] = [];\n\n    if (!intersects(bbox, node)) return result;\n\n    const nodesToSearch: Node<T>[] = [];\n\n    while (node) {\n      for (let i = 0; i < node.children.length; i++) {\n        const childBBox = calcChildBBox(node, i, this.toBBox);\n\n        if (intersects(bbox, childBBox)) {\n          if (node.leaf === true) result.push(node.children[i]);\n          else {\n            if (contains(bbox, childBBox)) {\n              this._all(node.children[i], result);\n            } else nodesToSearch.push(node.children[i]);\n          }\n        }\n      }\n      node = nodesToSearch.pop();\n    }\n\n    return result;\n  }\n\n  collides(bbox: BBox): boolean {\n    let node = this.data;\n\n    if (!intersects(bbox, node)) return false;\n\n    const nodesToSearch = [];\n    while (node) {\n      for (let i = 0; i < node.children.length; i++) {\n        const childBBox = calcChildBBox(node, i, this.toBBox);\n\n        if (intersects(bbox, childBBox)) {\n          if (node.leaf || contains(bbox, childBBox)) return true;\n          nodesToSearch.push(node.children[i]);\n        }\n      }\n      node = nodesToSearch.pop();\n    }\n\n    return false;\n  }\n\n  load(data: T[]): RBush<T> {\n    if (!(data && data.length)) return this;\n\n    if (data.length < this._minEntries) {\n      for (let i = 0; i < data.length; i++) {\n        this.insert(data[i]);\n      }\n      return this;\n    }\n\n    // recursively build the tree with the given data from scratch using OMT algorithm\n    let node = this._build(data.slice(), 0, data.length - 1, 0);\n\n    if (!this.data.children.length) {\n      // save as is if tree is empty\n      this.data = node;\n    } else if (this.data.height === node.height) {\n      // split root if trees have the same height\n      this._splitRoot(this.data, node);\n    } else {\n      if (this.data.height < node.height) {\n        // swap trees if inserted one is bigger\n        const tmpNode = this.data;\n        this.data = node;\n        node = tmpNode;\n      }\n\n      // insert the small tree into the large tree at appropriate level\n      this._insert(node, this.data.height - node.height - 1, true);\n    }\n\n    return this;\n  }\n\n  insert(item: T): RBush<T> {\n    assert(this.data.height >= 1);\n\n    if (item) this._insert(item, this.data.height - 1, false);\n    return this;\n  }\n\n  clear(): RBush<T> {\n    this.data = createLeaf([]);\n    return this;\n  }\n\n  remove(item?: T, equalsFn?: EqualsFn<T>): RBush<T> {\n    if (!item) return this;\n\n    let node: Node<T> | null = this.data;\n    const bbox = this.toBBox(item);\n    const path: Array<Node<T>> = [];\n    const indexes = [];\n    let i: number;\n    let parent: Node<T>;\n    let goingUp: boolean;\n\n    // depth-first iterative tree traversal\n    while (node || path.length) {\n      if (!node) {\n        // go up\n        node = path.pop();\n        parent = path[path.length - 1];\n        i = indexes.pop();\n        goingUp = true;\n      }\n\n      if (node.leaf) {\n        // check current node\n        const index = findItem(item, node.children, equalsFn);\n\n        if (index !== -1) {\n          // item found, remove the item and condense tree upwards\n          node.children.splice(index, 1);\n          path.push(node);\n          this._condense(path);\n          return this;\n        }\n      }\n\n      if (!goingUp && !node.leaf && contains(node, bbox)) {\n        // go down\n        path.push(node);\n        indexes.push(i);\n        i = 0;\n        parent = node;\n        node = node.children[0] as Branch<T>;\n      } else if (parent) {\n        // go right\n        i++;\n        node = parent.children[i] as Branch<T>;\n        goingUp = false;\n      } else node = null; // nothing found\n    }\n\n    return this;\n  }\n\n  toJSON(): Node<T> {\n    return deepClone(this.data);\n  }\n\n  fromJSON(data: Node<T>): RBush<T> {\n    this.data = deepClone(data);\n    return this;\n  }\n\n  private _all(node: Node<T>, result: Array<T>): T[] {\n    const nodesToSearch: Array<Node<T>> = [];\n    while (node) {\n      if (node.leaf === true) result.push(...node.children);\n      else {\n        nodesToSearch.push(...node.children);\n      }\n\n      node = nodesToSearch.pop();\n    }\n    return result;\n  }\n\n  private _build(\n    items: T[],\n    left: number,\n    right: number,\n    height: number,\n  ): Node<T> {\n    const N = right - left + 1;\n    let M = this._maxEntries;\n\n    if (N <= M) {\n      // reached leaf level; return leaf\n      const leaf = createLeaf(items.slice(left, right + 1));\n      calcBBox(leaf, this.toBBox);\n      return leaf;\n    }\n\n    if (!height) {\n      // target height of the bulk-loaded tree\n      height = Math.ceil(Math.log(N) / Math.log(M));\n\n      // target number of root entries to maximize storage utilization\n      M = Math.ceil(N / Math.pow(M, height - 1));\n    }\n\n    const node = createNode<T>([], height);\n\n    // split the items into M mostly square tiles\n\n    const N2 = Math.ceil(N / M);\n    const N1 = N2 * Math.ceil(Math.sqrt(M));\n\n    multiSelect(items, left, right, N1, this.compareMinX);\n\n    for (let i = left; i <= right; i += N1) {\n      const right2 = Math.min(i + N1 - 1, right);\n\n      multiSelect(items, i, right2, N2, this.compareMinY);\n\n      for (let j = i; j <= right2; j += N2) {\n        const right3 = Math.min(j + N2 - 1, right2);\n\n        // pack each entry recursively\n        node.children.push(this._build(items, j, right3, height - 1));\n      }\n    }\n\n    calcBBox(node, this.toBBox);\n\n    return node;\n  }\n\n  private _chooseSubtree(\n    bbox: BBox,\n    node: Node<T>,\n    level: number,\n    path: Node<T>[],\n  ): Node<T> {\n    while (true) {\n      path.push(node);\n\n      if (node.leaf === true || path.length - 1 === level) break;\n\n      let minArea = Infinity;\n      let minEnlargement = Infinity;\n      let targetNode: Node<T>;\n\n      for (let i = 0; i < node.children.length; i++) {\n        const child = node.children[i];\n        const area = bboxArea(child);\n        const enlargement = enlargedArea(bbox, child) - area;\n\n        // choose entry with the least area enlargement\n        if (enlargement < minEnlargement) {\n          minEnlargement = enlargement;\n          minArea = area < minArea ? area : minArea;\n          targetNode = child;\n        } else if (enlargement === minEnlargement) {\n          // otherwise choose one with the smallest area\n          if (area < minArea) {\n            minArea = area;\n            targetNode = child;\n          }\n        }\n      }\n\n      node = targetNode || node.children[0];\n    }\n\n    return node;\n  }\n\n  private _insert(item: Node<T>, level: number, isNode: true): void;\n  private _insert(item: T, level: number, isNode: false): void;\n  private _insert(item: T | Node<T>, level: number, isNode?: boolean): void {\n    const bbox: BBox = isNode ? (item as Node<T>) : this.toBBox(item as T);\n\n    const insertPath: Node<T>[] = [];\n\n    // find the best node for accommodating the item, saving all nodes along the path too\n    const node = this._chooseSubtree(bbox, this.data, level, insertPath);\n\n    // put the item into the node\n    if (node.leaf) {\n      node.children.push(item as T);\n    } else {\n      node.children.push(item as Node<T>);\n    }\n    extend(node, bbox);\n\n    // split on node overflow; propagate upwards if necessary\n    while (level >= 0) {\n      if (insertPath[level].children.length > this._maxEntries) {\n        this._split(insertPath, level);\n        level--;\n      } else break;\n    }\n\n    // adjust bboxes along the insertion path\n    this._adjustParentBBoxes(bbox, insertPath, level);\n  }\n\n  // split overflowed node into two\n  private _split(insertPath: Node<T>[], level: number): void {\n    const node = insertPath[level];\n\n    const M = node.children.length;\n    const m = this._minEntries;\n\n    this._chooseSplitAxis(node, m, M);\n\n    const splitIndex = this._chooseSplitIndex(node, m, M);\n\n    let newNode: Node<T>;\n    if (node.leaf === true) {\n      newNode = createLeaf(\n        node.children.splice(splitIndex, node.children.length - splitIndex),\n      );\n    } else {\n      newNode = createNode(\n        node.children.splice(splitIndex, node.children.length - splitIndex),\n        node.height,\n      );\n    }\n\n    calcBBox(node, this.toBBox);\n    calcBBox(newNode, this.toBBox);\n\n    if (level) insertPath[level - 1].children.push(newNode);\n    else this._splitRoot(node, newNode);\n  }\n\n  private _splitRoot(node: Node<T>, newNode: Node<T>): void {\n    // split root node\n    this.data = createNode([node, newNode], node.height + 1);\n    calcBBox(this.data, this.toBBox);\n  }\n\n  private _chooseSplitIndex(node: Node<T>, m: number, M: number): number {\n    let index: number = undefined;\n    let minOverlap = Infinity;\n    let minArea = Infinity;\n\n    for (let i = m; i <= M - m; i++) {\n      const bbox1 = distBBox(node, 0, i, this.toBBox);\n      const bbox2 = distBBox(node, i, M, this.toBBox);\n\n      const overlap = intersectionArea(bbox1, bbox2);\n      const area = bboxArea(bbox1) + bboxArea(bbox2);\n\n      // choose distribution with minimum overlap\n      if (overlap < minOverlap) {\n        minOverlap = overlap;\n        index = i;\n\n        minArea = area < minArea ? area : minArea;\n      } else if (overlap === minOverlap) {\n        // otherwise choose distribution with minimum area\n        if (area < minArea) {\n          minArea = area;\n          index = i;\n        }\n      }\n    }\n\n    return index || M - m;\n  }\n\n  // sorts node children by the best axis for split\n  private _chooseSplitAxis(node: Node<T>, m: number, M: number): void {\n    const xMargin = this._allDistMargin(node, m, M);\n    const yMargin = this._allDistMargin(node, m, M);\n\n    // if total distributions margin value is minimal for x, sort by minX,\n    // otherwise it's already sorted by minY\n    if (xMargin < yMargin) {\n      if (node.leaf === true) {\n        node.children.sort(this.compareMinX);\n      } else {\n        node.children.sort(compareNodeMinX);\n      }\n    }\n  }\n\n  // total margin of all possible split distributions where each node is at least m full\n  private _allDistMargin(node: Node<T>, m: number, M: number): number {\n    if (node.leaf === true) {\n      node.children.sort(this.compareMinX);\n    } else {\n      node.children.sort(compareNodeMinX);\n    }\n\n    const leftBBox = distBBox(node, 0, m, this.toBBox);\n    const rightBBox = distBBox(node, M - m, M, this.toBBox);\n    let margin = bboxMargin(leftBBox) + bboxMargin(rightBBox);\n\n    for (let i = m; i < M - m; i++) {\n      extend(leftBBox, calcChildBBox(node, i, this.toBBox));\n      margin += bboxMargin(leftBBox);\n    }\n\n    for (let i = M - m - 1; i >= m; i--) {\n      extend(rightBBox, calcChildBBox(node, i, this.toBBox));\n      margin += bboxMargin(rightBBox);\n    }\n\n    return margin;\n  }\n\n  private _adjustParentBBoxes(\n    bbox: BBox,\n    path: Node<T>[],\n    level: number,\n  ): void {\n    // adjust bboxes along the given tree path\n    for (let i = level; i >= 0; i--) {\n      extend(path[i], bbox);\n    }\n  }\n\n  private _condense(path: Array<Node<T>>): void {\n    // go through the path, removing empty nodes and updating bboxes\n    let siblings: Array<Node<T>> | Array<T>;\n\n    for (let i = path.length - 1; i >= 0; i--) {\n      if (path[i].children.length === 0) {\n        if (i > 0) {\n          siblings = path[i - 1].children;\n          siblings.splice(siblings.indexOf(path[i]), 1);\n        } else this.clear();\n      } else calcBBox(path[i], this.toBBox);\n    }\n  }\n}\n\nfunction deepClone<T>(obj: T, cloned = new WeakMap()): T {\n  if (obj === null || typeof obj !== 'object') {\n    return obj;\n  }\n  if (cloned.has(obj)) {\n    return cloned.get(obj) as T; // 这里需要使用类型断言\n  }\n\n  const clone = Array.isArray(obj) ? [] : {};\n  cloned.set(obj, clone);\n\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      const value = obj[key];\n      if (value !== null && typeof value === 'object') {\n        // 递归克隆并设置到 clone 中\n        clone[key as string] = deepClone(value, cloned);\n      } else {\n        clone[key as string] = value;\n      }\n    }\n  }\n\n  return clone as T;\n}\n\nfunction createLeaf<T>(children: Array<T>): Leaf<T> {\n  return {\n    children,\n    height: 1,\n    leaf: true,\n    minX: Infinity,\n    minY: Infinity,\n    maxX: -Infinity,\n    maxY: -Infinity,\n  };\n}\n\nfunction createNode<T>(children: Array<Node<T>>, height: number): Branch<T> {\n  assert(height > 1);\n  return {\n    children,\n    height,\n    leaf: false,\n    minX: Infinity,\n    minY: Infinity,\n    maxX: -Infinity,\n    maxY: -Infinity,\n  };\n}\n\n// calculate node's bbox from bboxes of its children\nfunction calcBBox<T>(node: Node<T>, toBBox: ToBBox<T>): void {\n  distBBox(node, 0, node.children.length, toBBox, node);\n}\n\nfunction calcChildBBox<T>(\n  node: Node<T>,\n  index: number,\n  toBBox: ToBBox<T>,\n): BBox {\n  if (node.leaf === true) {\n    return toBBox(node.children[index]);\n  }\n\n  return node.children[index];\n}\n\n// min bounding rectangle of node children from k to p-1\nfunction distBBox<T>(\n  node: Readonly<Node<T>>,\n  k: number,\n  p: number,\n  toBBox: ToBBox<T>,\n): Node<T>;\nfunction distBBox<T>(\n  node: Readonly<Node<T>>,\n  k: number,\n  p: number,\n  toBBox: ToBBox<T>,\n  destNode: Node<T>,\n): void;\nfunction distBBox<T>(\n  node: Readonly<Node<T>>,\n  k: number,\n  p: number,\n  toBBox: ToBBox<T>,\n  destNode?: Node<T>,\n): Node<T> | void {\n  if (!destNode)\n    destNode = node.leaf ? createLeaf([]) : createNode([], node.height);\n  destNode.minX = Infinity;\n  destNode.minY = Infinity;\n  destNode.maxX = -Infinity;\n  destNode.maxY = -Infinity;\n\n  for (let i = k; i < p; i++) {\n    extend(destNode, calcChildBBox(node, i, toBBox));\n  }\n\n  return destNode;\n}\n\nfunction intersectionArea(a: Readonly<BBox>, b: Readonly<BBox>): number {\n  const minX = Math.max(a.minX, b.minX);\n  const minY = Math.max(a.minY, b.minY);\n  const maxX = Math.min(a.maxX, b.maxX);\n  const maxY = Math.min(a.maxY, b.maxY);\n\n  return Math.max(0, maxX - minX) * Math.max(0, maxY - minY);\n}\n\nfunction extend(a: BBox, b: Readonly<BBox>): void {\n  a.minX = Math.min(a.minX, b.minX);\n  a.minY = Math.min(a.minY, b.minY);\n  a.maxX = Math.max(a.maxX, b.maxX);\n  a.maxY = Math.max(a.maxY, b.maxY);\n}\n\nfunction bboxArea(a: BBox): number {\n  return (a.maxX - a.minX) * (a.maxY - a.minY);\n}\n\nfunction bboxMargin(a: BBox): number {\n  return a.maxX - a.minX + (a.maxY - a.minY);\n}\n\nfunction enlargedArea(a: Readonly<BBox>, b: Readonly<BBox>): number {\n  return (\n    (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *\n    (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY))\n  );\n}\n\nfunction compareNodeMinX(a: Readonly<BBox>, b: Readonly<BBox>): number {\n  return a.minX - b.minX;\n}\n\nfunction compareNodeMinY(a: Readonly<BBox>, b: Readonly<BBox>): number {\n  return a.minY - b.minY;\n}\n\nfunction findItem<T>(item: T, items: T[], equalsFn?: EqualsFn<T>): number {\n  if (!equalsFn) return items.indexOf(item);\n\n  for (let i = 0; i < items.length; i++) {\n    if (equalsFn(item, items[i])) return i;\n  }\n  return -1;\n}\n\nfunction contains(a: Readonly<BBox>, b: Readonly<BBox>): boolean {\n  return (\n    a.minX <= b.minX && a.minY <= b.minY && b.maxX <= a.maxX && b.maxY <= a.maxY\n  );\n}\n\nfunction intersects(a: Readonly<BBox>, b: Readonly<BBox>): boolean {\n  return (\n    b.minX <= a.maxX && b.minY <= a.maxY && b.maxX >= a.minX && b.maxY >= a.minY\n  );\n}\n\n// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;\n// combines selection algorithm with binary divide & conquer approach\nfunction multiSelect<T>(\n  arr: T[],\n  left: number,\n  right: number,\n  n: number,\n  compare: compareMin<T>,\n): void {\n  const stack = [left, right];\n\n  while (stack.length) {\n    right = stack.pop();\n    left = stack.pop();\n\n    if (right - left <= n) continue;\n\n    const mid = left + Math.ceil((right - left) / n / 2) * n;\n    quickselect(arr, mid, left, right, compare);\n\n    stack.push(left, mid, mid, right);\n  }\n}\n"],"names":[],"mappings":"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"}